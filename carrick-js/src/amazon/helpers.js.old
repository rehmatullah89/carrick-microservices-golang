import {Config} from "./config";
import {Cache} from "./cache";

const Helpers = {
    getReferer() {
        return Cache.get('r');
    },
    checkUrlParameterExists(param, url) {
        url = !url ? window.location.search : url;

        if (url.indexOf('?' + param + '=') != -1 || url.indexOf('&' + param + '=') != -1)
            return true;

        return false
    },
    replaceTagParam(urlString, newParam) {
        if (urlString.indexOf('tag=') !== -1) {
            return urlString.replace(/([?&]tag=)[^&]+/gi, '$1' + newParam);
        }

        let url = new URL(urlString);
        let search = url.search.substring(1);

        if (search) {
            search = '&' + search;
        }

        return url.origin + url.pathname + '?tag=' + newParam + '' + search;
    },
    getUrlParameter(sParam, url) {
        url = !url ? window.location.search : url;

        var sPageURL = url.substring(1),
            sURLVariables = sPageURL.split('&'),
            sParameterName,
            i;

        for (i = 0; i < sURLVariables.length; i++) {
            sParameterName = sURLVariables[i].split('=');

            if (sParameterName[0] === sParam) {
                return typeof sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
            }
        }
        return false;
    },
    // transformUrls(newTag, noskim=false, anchors = []) {
    //     let url;
    //     let urls = !anchors.length ? document.querySelectorAll(Config.trackedSelector) : anchors;

    //     for (let i = 0; i < urls.length; i++) {
    //         url = urls[i];
    //         url.href = Helpers.replaceTagParam(url.href, newTag);
    //         url.classList.add('carrick-track');
    //         if ( document.getElementById("skimlinks-pixels-iframe") ){
    //             url.classList.add('noskim');  
    //         }
    //     }
    // },
    transformNonAmazonUrls() {
        let urls = document.querySelectorAll(Config.trackedNonAmazonSelectors)
        for (let i = 0; i < urls.length; i++) {
            let url = urls[i];
            let custom_id = 'DG-' + Helpers.hashPath(new URL(url.href).pathname)
            url.setAttribute('data-skimlinks-tracking', custom_id)
            url.classList.add('skimlinks-track')
        }
    },
    delegateEvent(event, callback, targetSelector, parentElement) {
        parentElement.addEventListener(event, (e) => {
            const elem = e.target.closest(targetSelector);

            if (elem && callback instanceof Function) {
                callback.call(elem, e, elem);
            }
        });
    },
    hashPath(path){
        return path.split("").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);              
    }
};

export {Helpers}